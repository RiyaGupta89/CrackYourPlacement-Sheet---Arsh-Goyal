class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(0,nums.length-1,nums);
    }
    private int mergeSort(int low,int high, int[] nums){
        
        if(low>=high) return 0;
        
            int mid = low+(high-low)/2;
            int count=mergeSort(low,mid,nums);
            count+= mergeSort(mid+1,high,nums);
            count+=merge(low,mid,high,nums);
        
        return count;
    }
    private int merge(int low, int mid, int high, int[] nums){
        int count = 0;
        int j = mid+1;
        
        for(int i=low;i<=mid;i++)
        {
            while(j<=high&&nums[i]>2*nums[j]){
                j++;
            }
            count+=(j-(mid+1));
        }        
        
        ArrayList<Integer> temp = new ArrayList<>();
        int left = low;
        int right = mid+1;
        
        while(left<=mid&&right<=high){
            if(nums[left]<=nums[right]){
                temp.add(nums[left++]);
            } else {
                temp.add(nums[right++]);
            }
            
        }
        while(left<=mid){
            temp.add(nums[left++]);
        }
        
        while(right<=high){
            temp.add(nums[right++]);
        }
        
        for(int i=low;i<=high;i++){
            nums[i]=temp.get(i-low);
        }
        return count;
    }
}
